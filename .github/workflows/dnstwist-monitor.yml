name: DNSTwist Monitor

on:
  schedule:
    - cron: "0 6,18 * * *"   # twice daily (UTC)
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: dnstwist-monitor
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      WATCH_DOMAINS: ${{ secrets.WATCH_DOMAINS }}
      RISKY_KEYWORDS: ${{ secrets.RISKY_KEYWORDS }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      ALLOWLIST: ${{ secrets.ALLOWLIST }}

      # knobs
      LSH_THRESHOLD: "80"
      PHASH_THRESHOLD: "90"
      MIN_SCORE: "3"
      NAME_EDIT_DISTANCE_MAX: "1"
      NEW_DOMAIN_WINDOW_DAYS: "14"
      SHORTLIST_CAP: "120"
      THREADS: "6"
      TIMEOUT_SECS: "15"
      SNAPSHOT_TOP_N: "8"
      PATH_PROBES: "/,/app,/bridge,/swap,/connect,/login,/signin"
      REPORT_ONLY_LIVE: "1"         # ← only keep domains that actually load

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: "20" }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: "3.x" }

      - name: Install DNSTwist
        run: |
          python -m pip install --upgrade pip
          pip install "dnstwist[full]"

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .dnstwist-cache
          key: dnstwist-${{ github.ref_name }}
          restore-keys: dnstwist-

      - name: Ensure cache dir
        run: mkdir -p .dnstwist-cache

      # Chrome setup (arm64-safe, no libasound2)
      - name: Setup Chrome (for screenshots)
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1
        with: { chrome-version: stable }
        continue-on-error: true

      - name: Install headless deps (t64-safe)
        shell: bash
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          GTK=$(apt-cache show libgtk-3-0 >/dev/null 2>&1 && echo libgtk-3-0 || echo libgtk-3-0t64)
          CUPS=$(apt-cache show libcups2  >/dev/null 2>&1 && echo libcups2  || echo libcups2t64)
          sudo apt-get install -y \
            fonts-liberation fonts-noto fonts-noto-color-emoji \
            libnss3 libnspr4 ca-certificates \
            libxkbcommon0 libxcomposite1 libxrandr2 libgbm1 \
            "$GTK" "$CUPS" xvfb

      - name: Fallback Chromium
        id: chromium-fallback
        if: steps.setup-chrome.outcome == 'failure' || steps.setup-chrome.outputs.chrome-path == ''
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y chromium-browser || sudo apt-get install -y chromium
          echo "chrome-path=$(command -v chromium-browser || command -v chromium)" >> "$GITHUB_OUTPUT"

      - name: Resolve Chrome path
        id: chrome-bin
        shell: bash
        run: |
          set -e
          P="${{ steps.setup-chrome.outputs.chrome-path }}"
          if [ -z "$P" ]; then P="${{ steps.chromium-fallback.outputs.chrome-path }}"; fi
          echo "value=$P" >> "$GITHUB_OUTPUT"
          echo "Using CHROME_BIN=$P"

      # === Scan & diagnostics ===
      - name: Phase A - shortlist (LSH)
        id: shortlist
        run: node .github/scripts/phase_a_shortlist.js

      - name: Phase B - pHash shortlist
        if: steps.shortlist.outputs.shortlist_count != '0'
        run: node .github/scripts/phash_shortlist.js

      # Run diagnostics BEFORE building findings, gated on shortlist having items
      - name: HTTP diagnostics (paths + www)
        if: steps.shortlist.outputs.shortlist_count != '0'
        run: node .github/scripts/postcheck_http.js

      - name: RDAP enrich (registrar/abuse/NS/age)
        if: steps.shortlist.outputs.shortlist_count != '0'
        run: node .github/scripts/enrich_rdap.js

      - name: Build findings (LIVE-only)
        id: filter
        run: node .github/scripts/build_findings.js

      # === Evidence + notifications ===
      - name: Snapshot top suspects (PNG)
        if: steps.filter.outputs.has_findings == 'true' && steps.chrome-bin.outputs.value != '' && env.SKIP_SCREENSHOTS != '1'
        env:
          CHROME_BIN: ${{ steps.chrome-bin.outputs.value }}
          SNAPSHOT_TOP_N: ${{ env.SNAPSHOT_TOP_N }}
          DBUS_SESSION_BUS_ADDRESS: /dev/null
          XDG_RUNTIME_DIR: /tmp
          LIBGL_ALWAYS_SOFTWARE: "1"
        run: node .github/scripts/snapshot_findings.js

      - name: Compare snapshots to reference
        if: steps.filter.outputs.has_findings == 'true'
        run: |
          npm i -D pngjs
          node .github/scripts/compare_snapshots.js

      - name: Rebuild findings with snapshot similarity
        if: steps.filter.outputs.has_findings == 'true'
        run: node .github/scripts/build_findings.js

      - name: Upload screenshots (2 days)
        if: steps.filter.outputs.has_findings == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dnstwist-snaps
          retention-days: 2
          path: |
            snaps/*.png
            snapshots_manifest.json

      - name: Upload diagnostics (2 days)
        if: steps.filter.outputs.has_findings == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dnstwist-diagnostics
          retention-days: 2
          path: |
            http_diagnostics.json
            findings.json
            findings_enriched.json

      - name: Slack notify (if findings)
        if: steps.filter.outputs.has_findings == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          RUN_URL: ${{ env.RUN_URL }}
          SLACK_MAX_ITEMS: "20"
        run: node .github/scripts/slack_notify.js
